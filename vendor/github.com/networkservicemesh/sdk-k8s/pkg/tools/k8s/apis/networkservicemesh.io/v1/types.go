// Copyright (c) 2020 Doc.ai and/or its affiliates.
//
// Copyright (c) 2020 Cisco and/or its affiliates.
//
// Copyright (c) 2020 VMware, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"github.com/networkservicemesh/api/pkg/api/registry"
	"google.golang.org/protobuf/proto"
	metaV1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type State string

const (
	OFFLINE = "OFFLINE"
	RUNNING = "RUNNING"
	PAUSED  = "PAUSED"
	ERROR   = "ERROR"
)

// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkService struct {
	metaV1.TypeMeta   `json:",inline"`
	metaV1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NetworkServiceSpec   `json:"spec"`
	Status NetworkServiceStatus `json:"status"`
}

type NetworkServiceSpec registry.NetworkService

func (in *NetworkServiceSpec) DeepCopyInto(out *NetworkServiceSpec) {
	clone := (*NetworkServiceSpec)(proto.Clone((*registry.NetworkService)(in)).(*registry.NetworkService))

	out.Name = clone.Name
	out.Payload = clone.Payload
	out.Matches = clone.Matches
}

type NetworkServiceStatus struct{}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkServiceList struct {
	metaV1.TypeMeta `json:",inline"`
	metaV1.ListMeta `json:"metadata,omitempty"`

	Items []NetworkService `json:"items"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkServiceEndpoint struct {
	metaV1.TypeMeta   `json:",inline"`
	metaV1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NetworkServiceEndpointSpec   `json:"spec"`
	Status NetworkServiceEndpointStatus `json:"status"`
}

type NetworkServiceEndpointSpec registry.NetworkServiceEndpoint

func (in *NetworkServiceEndpointSpec) DeepCopyInto(out *NetworkServiceEndpointSpec) {
	clone := (*NetworkServiceEndpointSpec)(proto.Clone((*registry.NetworkServiceEndpoint)(in)).(*registry.NetworkServiceEndpoint))
	out.ExpirationTime = clone.ExpirationTime
	out.Name = clone.Name
	out.Url = clone.Url
	out.NetworkServiceNames = clone.NetworkServiceNames
	out.NetworkServiceLabels = clone.NetworkServiceLabels
}

type NetworkServiceEndpointStatus struct {
	State State `json:"state"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkServiceEndpointList struct {
	metaV1.TypeMeta `json:",inline"`
	metaV1.ListMeta `json:"metadata,omitempty"`

	Items []NetworkServiceEndpoint `json:"items"`
}
