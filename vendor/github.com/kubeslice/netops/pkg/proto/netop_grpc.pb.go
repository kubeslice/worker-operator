// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package netops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetOpsServiceClient is the client API for NetOpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetOpsServiceClient interface {
	// Update Slice QoS Profile
	UpdateSliceQosProfile(ctx context.Context, in *SliceQosProfile, opts ...grpc.CallOption) (*Response, error)
	// Message to communicate slice create/delete events to netop pods
	UpdateSliceLifeCycleEvent(ctx context.Context, in *SliceLifeCycleEvent, opts ...grpc.CallOption) (*Response, error)
	// The Interface to update the slicegw context to global handle
	UpdateConnectionContext(ctx context.Context, in *NetOpConnectionContext, opts ...grpc.CallOption) (*Response, error)
}

type netOpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetOpsServiceClient(cc grpc.ClientConnInterface) NetOpsServiceClient {
	return &netOpsServiceClient{cc}
}

func (c *netOpsServiceClient) UpdateSliceQosProfile(ctx context.Context, in *SliceQosProfile, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/netops.NetOpsService/UpdateSliceQosProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netOpsServiceClient) UpdateSliceLifeCycleEvent(ctx context.Context, in *SliceLifeCycleEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/netops.NetOpsService/UpdateSliceLifeCycleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netOpsServiceClient) UpdateConnectionContext(ctx context.Context, in *NetOpConnectionContext, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/netops.NetOpsService/UpdateConnectionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetOpsServiceServer is the server API for NetOpsService service.
// All implementations must embed UnimplementedNetOpsServiceServer
// for forward compatibility
type NetOpsServiceServer interface {
	// Update Slice QoS Profile
	UpdateSliceQosProfile(context.Context, *SliceQosProfile) (*Response, error)
	// Message to communicate slice create/delete events to netop pods
	UpdateSliceLifeCycleEvent(context.Context, *SliceLifeCycleEvent) (*Response, error)
	// The Interface to update the slicegw context to global handle
	UpdateConnectionContext(context.Context, *NetOpConnectionContext) (*Response, error)
	mustEmbedUnimplementedNetOpsServiceServer()
}

// UnimplementedNetOpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetOpsServiceServer struct {
}

func (UnimplementedNetOpsServiceServer) UpdateSliceQosProfile(context.Context, *SliceQosProfile) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSliceQosProfile not implemented")
}
func (UnimplementedNetOpsServiceServer) UpdateSliceLifeCycleEvent(context.Context, *SliceLifeCycleEvent) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSliceLifeCycleEvent not implemented")
}
func (UnimplementedNetOpsServiceServer) UpdateConnectionContext(context.Context, *NetOpConnectionContext) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionContext not implemented")
}
func (UnimplementedNetOpsServiceServer) mustEmbedUnimplementedNetOpsServiceServer() {}

// UnsafeNetOpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetOpsServiceServer will
// result in compilation errors.
type UnsafeNetOpsServiceServer interface {
	mustEmbedUnimplementedNetOpsServiceServer()
}

func RegisterNetOpsServiceServer(s grpc.ServiceRegistrar, srv NetOpsServiceServer) {
	s.RegisterService(&NetOpsService_ServiceDesc, srv)
}

func _NetOpsService_UpdateSliceQosProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceQosProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetOpsServiceServer).UpdateSliceQosProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netops.NetOpsService/UpdateSliceQosProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetOpsServiceServer).UpdateSliceQosProfile(ctx, req.(*SliceQosProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetOpsService_UpdateSliceLifeCycleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceLifeCycleEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetOpsServiceServer).UpdateSliceLifeCycleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netops.NetOpsService/UpdateSliceLifeCycleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetOpsServiceServer).UpdateSliceLifeCycleEvent(ctx, req.(*SliceLifeCycleEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetOpsService_UpdateConnectionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetOpConnectionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetOpsServiceServer).UpdateConnectionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netops.NetOpsService/UpdateConnectionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetOpsServiceServer).UpdateConnectionContext(ctx, req.(*NetOpConnectionContext))
	}
	return interceptor(ctx, in, info, handler)
}

// NetOpsService_ServiceDesc is the grpc.ServiceDesc for NetOpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetOpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netops.NetOpsService",
	HandlerType: (*NetOpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSliceQosProfile",
			Handler:    _NetOpsService_UpdateSliceQosProfile_Handler,
		},
		{
			MethodName: "UpdateSliceLifeCycleEvent",
			Handler:    _NetOpsService_UpdateSliceLifeCycleEvent_Handler,
		},
		{
			MethodName: "UpdateConnectionContext",
			Handler:    _NetOpsService_UpdateConnectionContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netop.proto",
}
