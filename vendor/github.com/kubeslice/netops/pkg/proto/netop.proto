/*  Copyright (c) 2022 Avesha, Inc. All rights reserved.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
syntax = "proto3";

package netops;
option go_package = "./;netops";

// Response represents the netops response format.
message Response {
    string statusMsg = 1;
}

// TcType represents Traffic Control Type.
enum TcType {
    BANDWIDTH_CONTROL = 0;
}

enum ClassType {
    HTB = 0;
    TBF = 1;
}

// Generic event types enum
enum EventType {
    EV_CREATE = 0;
    EV_UPDATE = 1;
    EV_DELETE = 2;
}

// Slice QoS Profile
message SliceQosProfile {
    // Name of the slice
    string sliceName = 1;
    // Slice Identifier //TODO
    string sliceId = 2;
    // Name of the QoS profile attached to the slice
    string qosProfileName = 3;
    // TC type -  Bandwidth control
    TcType tcType = 4;
    // ClassType - HTB   ( HTB)
    ClassType ClassType = 5;
    // Bandwidth Ceiling in Mbps  - 5 Mbps (100k - 100 Mbps)
    uint32 bwCeiling = 6;
    // Bandwidth Guaranteed -  1 Mbps ( 100k- 100 Mbps)
    uint32 bwGuaranteed = 7;
    // Priority - 2 (Number 0-3)
    uint32 priority = 8;
    // Dscp class to mark inter cluster traffic
    string dscpClass = 9;
}

// Slice event message
message SliceLifeCycleEvent {
    // Name of the slice
    string sliceName = 1;
    // Event type
    EventType event = 2;
}

// slice gateway-host-type
enum SliceGwHostType {
    SLICE_GW_SERVER = 0;
    SLICE_GW_CLIENT = 1;
}

// NetOpConnectionContext - NetOp Connection Context.
message NetOpConnectionContext {
    // Slice-Id
    string sliceId = 1;
    // Local slice gateway ID
    string localSliceGwId = 2;
    // Local slice gateway VPN IP
    string localSliceGwVpnIP = 3;
    // Local slice gateway-host-type  -  client/server
    SliceGwHostType localSliceGwHostType = 4;
    // Local slice gateway NSM Subnet
    string localSliceGwNsmSubnet = 5;
    // Local slice gateway Node IP
    string localSliceGwNodeIP = 6;
    // Local slice gateway Node Port
    repeated string localSliceGwNodePorts = 7;
    // Remote slice gateway ID
    string remoteSliceGwId = 8;
    // Remote slice gateway VPN IP
    string remoteSliceGwVpnIP = 9;
    // Remote-slice gateway-host-type client or server
    SliceGwHostType remoteSliceGwHostType = 10;
    // Remote slice gateway NSM subnet
    string remoteSliceGwNsmSubnet = 11;
    // Remote slice gateway Node IP
    string remoteSliceGwNodeIP = 12;
    // Remote slice gateway Node Port
    repeated string remoteSliceGwNodePorts = 13;
}

service NetOpsService {
    // Update Slice QoS Profile
    rpc UpdateSliceQosProfile(SliceQosProfile) returns (Response) {}
    // Message to communicate slice create/delete events to netop pods
    rpc UpdateSliceLifeCycleEvent(SliceLifeCycleEvent) returns (Response) {}
    // The Interface to update the slicegw context to global handle
    rpc UpdateConnectionContext(NetOpConnectionContext) returns (Response) {}
}
