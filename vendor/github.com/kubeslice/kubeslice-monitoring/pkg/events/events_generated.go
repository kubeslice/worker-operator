package events

// Autogenerated file. DO NOT MODIFY DIRECTLY!
/*
 *  Copyright (c) 2022 Avesha, Inc. All rights reserved.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var eventsMap = map[EventName]*EventSchema{
	"LicenseSecretNotFound": {
		Name:                "LicenseSecretNotFound",
		Reason:              "LicenseNotFound",
		Action:              "LicenseValidation",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret with license config not found. Please ensure to create license secret if this is airgapped cluster.",
	},
	"MachineFileNotFound": {
		Name:                "MachineFileNotFound",
		Reason:              "MachineFileNotFound",
		Action:              "FetchMachineFileFromSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Machine File not present in license secret. Please contact kubeslice support team.",
	},
	"MachineFileInvalid": {
		Name:                "MachineFileInvalid",
		Reason:              "MachineFileInvalid",
		Action:              "VerifyMachineFile",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Machine File is invalid in license secret. Please contact kubeslice support team.",
	},
	"LicenseKeyInvalid": {
		Name:                "LicenseKeyInvalid",
		Reason:              "LicenseKeyInvalid",
		Action:              "DecryptMachineFile",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Key is invalid in license secret. Please contact kubeslice support team.",
	},
	"LicenseExpired": {
		Name:                "LicenseExpired",
		Reason:              "LicenseExpired",
		Action:              "ValidateLicense",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Expired, please contact kubeslice support team to get it renewed!",
	},
	"LicenseExpiredGracePeriodOn": {
		Name:                "LicenseExpiredGracePeriodOn",
		Reason:              "LicenseExpiredGracePeriodOn",
		Action:              "ValidateLicense",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "License Expired, grace period is on, please contact kubeslice support team to get it renewed!",
	},
	"MachineFingerPrintErr": {
		Name:                "MachineFingerPrintErr",
		Reason:              "MachineFingerPrintErr",
		Action:              "GetMachineFingerPrint",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Unable to fetch MachineFingerPrint. Please look at the kubeslice-controller logs for more details.",
	},
	"GotMachineFingerPrint": {
		Name:                "GotMachineFingerPrint",
		Reason:              "GotMachineFingerPrint",
		Action:              "GetMachineFingerPrint",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Got MachineFingerPrint successfully",
	},
	"ConfigMapErr": {
		Name:                "ConfigMapErr",
		Reason:              "ConfigMapErr",
		Action:              "GetConfigMap",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Unable to validate license keys from configmap. Please contact kubeslice support team",
	},
	"GotConfigMap": {
		Name:                "GotConfigMap",
		Reason:              "GotConfigMap",
		Action:              "GetConfigMap",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Got ConfigMap and kubeslice-license public keys successfully.",
	},
	"LicenseProxyUnreachable": {
		Name:                "LicenseProxyUnreachable",
		Reason:              "LicenseProxyUnreachable",
		Action:              "LicenseProxy",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to get response from license proxy for automatic license creation. Please contact Avesha to obtain licernse manually.",
	},
	"LicenseDeployError": {
		Name:                "LicenseDeployError",
		Reason:              "LicenseDeployError",
		Action:              "LicenseDeploy",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to deploy license secret.",
	},
	"LicenseDeploySuccess": {
		Name:                "LicenseDeploySuccess",
		Reason:              "LicenseDeploySuccess",
		Action:              "LicenseDeploy",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully fetched license data & deployed license secret.",
	},
	"ClusterMetadataCollectionFailed": {
		Name:                "ClusterMetadataCollectionFailed",
		Reason:              "ClusterMetadataCollectionFailed",
		Action:              "CollectClusterMetadata",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to collect cluster metadata for cluster creation.",
	},
	"ClusterMetadataCollectionSuccess": {
		Name:                "ClusterMetadataCollectionSuccess",
		Reason:              "ClusterMetadataCollectionSuccess",
		Action:              "CollectClusterMetadata",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully collected cluster metadata for license creation.",
	},
	"LicenseDataFetchError": {
		Name:                "LicenseDataFetchError",
		Reason:              "LicenseDataFetchError",
		Action:              "LicenseDataFetch",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to fetch license data from license proxy.",
	},
	"LicenseDataFetchSuccess": {
		Name:                "LicenseDataFetchSuccess",
		Reason:              "LicenseDataFetchSuccess",
		Action:              "LicenseDataFetch",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully fetched license data from license proxy.",
	},
	"LicenseSecretCreationFailed": {
		Name:                "LicenseSecretCreationFailed",
		Reason:              "LicenseSecretCreationFailed",
		Action:              "LicenseSecretCreation",
		Type:                EventTypeWarning,
		ReportingController: "kubeslice-controller",
		Message:             "Failed to create license secret.",
	},
	"LicenseSecretCreationSuccess": {
		Name:                "LicenseSecretCreationSuccess",
		Reason:              "LicenseSecretCreationSuccess",
		Action:              "LicenseSecretCreation",
		Type:                EventTypeNormal,
		ReportingController: "kubeslice-controller",
		Message:             "Successfully created license secret.",
	},
	"ProjectDeleted": {
		Name:                "ProjectDeleted",
		Reason:              "ProjectDeleted",
		Action:              "DeleteProject",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Project got deleted.",
	},
	"ProjectDeletionFailed": {
		Name:                "ProjectDeletionFailed",
		Reason:              "ProjectDeletionFailed",
		Action:              "DeleteProject",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Project deletion failed.",
	},
	"ClusterDeleted": {
		Name:                "ClusterDeleted",
		Reason:              "ClusterDeleted",
		Action:              "DeleteCluster",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Cluster got deleted.",
	},
	"ClusterDeletionFailed": {
		Name:                "ClusterDeletionFailed",
		Reason:              "ClusterDeletionFailed",
		Action:              "DeleteCluster",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Cluster deletion failed.",
	},
	"SliceConfigDeleted": {
		Name:                "SliceConfigDeleted",
		Reason:              "SliceConfigDeleted",
		Action:              "DeleteSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice config got deleted.",
	},
	"SliceConfigDeletionFailed": {
		Name:                "SliceConfigDeletionFailed",
		Reason:              "SliceConfigDeletionFailed",
		Action:              "DeleteSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice config deletion failed.",
	},
	"ServiceExportConfigDeleted": {
		Name:                "ServiceExportConfigDeleted",
		Reason:              "ServiceExportConfigDeleted",
		Action:              "DeleteServiceExportConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service export config got deleted.",
	},
	"ServiceExportConfigDeletionFailed": {
		Name:                "ServiceExportConfigDeletionFailed",
		Reason:              "ServiceExportConfigDeletionFailed",
		Action:              "DeleteServiceExportConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service export config deletion failed.",
	},
	"SliceQoSConfigDeleted": {
		Name:                "SliceQoSConfigDeleted",
		Reason:              "SliceQoSConfigDeleted",
		Action:              "DeleteSliceQoSConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice QoS config got deleted.",
	},
	"SliceQoSConfigDeletionFailed": {
		Name:                "SliceQoSConfigDeletionFailed",
		Reason:              "SliceQoSConfigDeletionFailed",
		Action:              "DeleteSliceQoSConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice QoS config deletion failed.",
	},
	"SecretDeleted": {
		Name:                "SecretDeleted",
		Reason:              "SecretDeleted",
		Action:              "DeleteSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret got deleted.",
	},
	"SecretDeletionFailed": {
		Name:                "SecretDeletionFailed",
		Reason:              "SecretDeletionFailed",
		Action:              "DeleteSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Secret deletion failed.",
	},
	"NamespaceCreated": {
		Name:                "NamespaceCreated",
		Reason:              "NamespaceCreated",
		Action:              "CreateNamespace",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Namespace got created.",
	},
	"NamespaceCreationFailed": {
		Name:                "NamespaceCreationFailed",
		Reason:              "NamespaceCreationFailed",
		Action:              "CreateNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace creation failed.",
	},
	"NamespaceDeleted": {
		Name:                "NamespaceDeleted",
		Reason:              "NamespaceDeleted",
		Action:              "DeleteNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace got deleted.",
	},
	"NamespaceDeletionFailed": {
		Name:                "NamespaceDeletionFailed",
		Reason:              "NamespaceDeletionFailed",
		Action:              "DeleteNamespace",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Namespace deletion failed.",
	},
	"WorkerClusterRoleCreated": {
		Name:                "WorkerClusterRoleCreated",
		Reason:              "WorkerClusterRoleCreated",
		Action:              "CreateWorkerClusterRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker cluster role got created.",
	},
	"WorkerClusterRoleCreationFailed": {
		Name:                "WorkerClusterRoleCreationFailed",
		Reason:              "WorkerClusterRoleCreationFailed",
		Action:              "CreateWorkerClusterRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker cluster role creation failed.",
	},
	"WorkerClusterRoleUpdated": {
		Name:                "WorkerClusterRoleUpdated",
		Reason:              "WorkerClusterRoleUpdated",
		Action:              "UpdateWorkerClusterRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker cluster role got updated.",
	},
	"WorkerClusterRoleUpdateFailed": {
		Name:                "WorkerClusterRoleUpdateFailed",
		Reason:              "WorkerClusterRoleUpdateFailed",
		Action:              "UpdateWorkerClusterRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker cluster role update failed.",
	},
	"ReadOnlyRoleCreated": {
		Name:                "ReadOnlyRoleCreated",
		Reason:              "ReadOnlyRoleCreated",
		Action:              "CreateReadOnlyRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read only role got created.",
	},
	"ReadOnlyRoleCreationFailed": {
		Name:                "ReadOnlyRoleCreationFailed",
		Reason:              "ReadOnlyRoleCreationFailed",
		Action:              "CreateReadOnlyRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read only role creation failed.",
	},
	"ReadOnlyRoleUpdated": {
		Name:                "ReadOnlyRoleUpdated",
		Reason:              "ReadOnlyRoleUpdated",
		Action:              "UpdateReadOnlyRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read only role got updated.",
	},
	"ReadOnlyRoleUpdateFailed": {
		Name:                "ReadOnlyRoleUpdateFailed",
		Reason:              "ReadOnlyRoleUpdateFailed",
		Action:              "UpdateReadOnlyRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read only role update failed.",
	},
	"ReadWriteRoleCreated": {
		Name:                "ReadWriteRoleCreated",
		Reason:              "ReadWriteRoleCreated",
		Action:              "CreateReadWriteRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read write role got created.",
	},
	"ReadWriteRoleCreationFailed": {
		Name:                "ReadWriteRoleCreationFailed",
		Reason:              "ReadWriteRoleCreationFailed",
		Action:              "CreateReadWriteRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read write role creation failed.",
	},
	"ReadWriteRoleUpdated": {
		Name:                "ReadWriteRoleUpdated",
		Reason:              "ReadWriteRoleUpdated",
		Action:              "UpdateReadWriteRole",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Read write role got updated.",
	},
	"ReadWriteRoleUpdateFailed": {
		Name:                "ReadWriteRoleUpdateFailed",
		Reason:              "ReadWriteRoleUpdateFailed",
		Action:              "UpdateReadWriteRole",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Read write role update failed.",
	},
	"ServiceAccountCreated": {
		Name:                "ServiceAccountCreated",
		Reason:              "ServiceAccountCreated",
		Action:              "CreateServiceAccount",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Service account got created.",
	},
	"ServiceAccountCreationFailed": {
		Name:                "ServiceAccountCreationFailed",
		Reason:              "ServiceAccountCreationFailed",
		Action:              "CreateServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account creation failed.",
	},
	"ServiceAccountSecretCreated": {
		Name:                "ServiceAccountSecretCreated",
		Reason:              "ServiceAccountSecretCreated",
		Action:              "CreateServiceAccountSecret",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Service account secret got created.",
	},
	"ServiceAccountSecretCreationFailed": {
		Name:                "ServiceAccountSecretCreationFailed",
		Reason:              "ServiceAccountSecretCreationFailed",
		Action:              "CreateServiceAccountSecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account secret creation failed.",
	},
	"DefaultRoleBindingCreated": {
		Name:                "DefaultRoleBindingCreated",
		Reason:              "DefaultRoleBindingCreated",
		Action:              "CreateDefaultRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default role binding got created.",
	},
	"DefaultRoleBindingCreationFailed": {
		Name:                "DefaultRoleBindingCreationFailed",
		Reason:              "DefaultRoleBindingCreationFailed",
		Action:              "CreateDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding creation failed.",
	},
	"DefaultRoleBindingUpdated": {
		Name:                "DefaultRoleBindingUpdated",
		Reason:              "DefaultRoleBindingUpdated",
		Action:              "UpdateDefaultRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default role binding got updated.",
	},
	"DefaultRoleBindingUpdateFailed": {
		Name:                "DefaultRoleBindingUpdateFailed",
		Reason:              "DefaultRoleBindingUpdateFailed",
		Action:              "UpdateDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding update failed.",
	},
	"DefaultRoleBindingDeleted": {
		Name:                "DefaultRoleBindingDeleted",
		Reason:              "DefaultRoleBindingDeleted",
		Action:              "DeleteDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding got deleted.",
	},
	"DefaultRoleBindingDeletionFailed": {
		Name:                "DefaultRoleBindingDeletionFailed",
		Reason:              "DefaultRoleBindingDeletionFailed",
		Action:              "DeleteDefaultRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default role binding deletion failed.",
	},
	"InactiveRoleBindingDeleted": {
		Name:                "InactiveRoleBindingDeleted",
		Reason:              "InactiveRoleBindingDeleted",
		Action:              "DeleteInactiveRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive role binding got deleted.",
	},
	"InactiveRoleBindingDeletionFailed": {
		Name:                "InactiveRoleBindingDeletionFailed",
		Reason:              "InactiveRoleBindingDeletionFailed",
		Action:              "DeleteInactiveRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive role binding deletion failed.",
	},
	"InactiveServiceAccountDeleted": {
		Name:                "InactiveServiceAccountDeleted",
		Reason:              "InactiveServiceAccountDeleted",
		Action:              "DeleteInactiveServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive service account got deleted.",
	},
	"InactiveServiceAccountDeletionFailed": {
		Name:                "InactiveServiceAccountDeletionFailed",
		Reason:              "InactiveServiceAccountDeletionFailed",
		Action:              "DeleteInactiveServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Inactive service account deletion failed.",
	},
	"ServiceAccountDeleted": {
		Name:                "ServiceAccountDeleted",
		Reason:              "ServiceAccountDeleted",
		Action:              "DeleteServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account got deleted.",
	},
	"ServiceAccountDeletionFailed": {
		Name:                "ServiceAccountDeletionFailed",
		Reason:              "ServiceAccountDeletionFailed",
		Action:              "DeleteServiceAccount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Service account deletion failed.",
	},
	"WorkerServiceImportDeletedForcefully": {
		Name:                "WorkerServiceImportDeletedForcefully",
		Reason:              "WorkerServiceImportDeletedForcefully",
		Action:              "DeleteWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import got deleted forcefully.",
	},
	"WorkerServiceImportRecreationFailed": {
		Name:                "WorkerServiceImportRecreationFailed",
		Reason:              "WorkerServiceImportRecreationFailed",
		Action:              "CreateWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import recreation failed after forceful deletion.",
	},
	"WorkerServiceImportRecreated": {
		Name:                "WorkerServiceImportRecreated",
		Reason:              "WorkerServiceImportRecreated",
		Action:              "CreateWorkerServiceImport",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker service import got recreated after forceful deletion.",
	},
	"WorkerServiceImportCreationFailed": {
		Name:                "WorkerServiceImportCreationFailed",
		Reason:              "WorkerServiceImportCreationFailed",
		Action:              "CreateWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import creation failed.",
	},
	"WorkerServiceImportCreated": {
		Name:                "WorkerServiceImportCreated",
		Reason:              "WorkerServiceImportCreated",
		Action:              "CreateWorkerServiceImport",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker service import got created.",
	},
	"WorkerServiceImportUpdateFailed": {
		Name:                "WorkerServiceImportUpdateFailed",
		Reason:              "WorkerServiceImportUpdateFailed",
		Action:              "UpdateWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import update failed.",
	},
	"WorkerServiceImportUpdated": {
		Name:                "WorkerServiceImportUpdated",
		Reason:              "WorkerServiceImportUpdated",
		Action:              "UpdateWorkerServiceImport",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker service import got updated.",
	},
	"WorkerServiceImportDeleted": {
		Name:                "WorkerServiceImportDeleted",
		Reason:              "WorkerServiceImportDeleted",
		Action:              "DeleteWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import got deleted.",
	},
	"WorkerServiceImportDeletionFailed": {
		Name:                "WorkerServiceImportDeletionFailed",
		Reason:              "WorkerServiceImportDeletionFailed",
		Action:              "DeleteWorkerServiceImport",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker service import deletion failed.",
	},
	"WorkerSliceConfigDeletedForcefully": {
		Name:                "WorkerSliceConfigDeletedForcefully",
		Reason:              "WorkerSliceConfigDeletedForcefully",
		Action:              "DeleteWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config got deleted forcefully.",
	},
	"WorkerSliceConfigRecreationFailed": {
		Name:                "WorkerSliceConfigRecreationFailed",
		Reason:              "WorkerSliceConfigRecreationFailed",
		Action:              "CreateWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config recreation failed after forceful deletion.",
	},
	"WorkerSliceConfigRecreated": {
		Name:                "WorkerSliceConfigRecreated",
		Reason:              "WorkerSliceConfigRecreated",
		Action:              "CreateWorkerSliceConfig",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice config got recreated after forceful deletion.",
	},
	"WorkerSliceConfigCreationFailed": {
		Name:                "WorkerSliceConfigCreationFailed",
		Reason:              "WorkerSliceConfigCreationFailed",
		Action:              "CreateWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config creation failed.",
	},
	"WorkerSliceConfigCreated": {
		Name:                "WorkerSliceConfigCreated",
		Reason:              "WorkerSliceConfigCreated",
		Action:              "CreateWorkerSliceConfig",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice config got created.",
	},
	"WorkerSliceConfigUpdateFailed": {
		Name:                "WorkerSliceConfigUpdateFailed",
		Reason:              "WorkerSliceConfigUpdateFailed",
		Action:              "UpdateWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config update failed.",
	},
	"WorkerSliceConfigUpdated": {
		Name:                "WorkerSliceConfigUpdated",
		Reason:              "WorkerSliceConfigUpdated",
		Action:              "UpdateWorkerSliceConfig",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice config got updated.",
	},
	"WorkerSliceConfigDeleted": {
		Name:                "WorkerSliceConfigDeleted",
		Reason:              "WorkerSliceConfigDeleted",
		Action:              "DeleteWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config got deleted.",
	},
	"WorkerSliceConfigDeletionFailed": {
		Name:                "WorkerSliceConfigDeletionFailed",
		Reason:              "WorkerSliceConfigDeletionFailed",
		Action:              "DeleteWorkerSliceConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice config deletion failed.",
	},
	"WorkerSliceGatewaySecretDeletionFailed": {
		Name:                "WorkerSliceGatewaySecretDeletionFailed",
		Reason:              "WorkerSliceGatewaySecretDeletionFailed",
		Action:              "DeleteWorkerSliceGatewaySecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway secret deletion failed while deleting worker slice gateway.",
	},
	"WorkerSliceGatewaySecretDeleted": {
		Name:                "WorkerSliceGatewaySecretDeleted",
		Reason:              "WorkerSliceGatewaySecretDeleted",
		Action:              "DeleteWorkerSliceGatewaySecret",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway secret got deleted while deleting worker slice gateway.",
	},
	"WorkerSliceGatewayDeletedForcefully": {
		Name:                "WorkerSliceGatewayDeletedForcefully",
		Reason:              "WorkerSliceGatewayDeletedForcefully",
		Action:              "DeleteWorkerSliceGateway",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway got deleted forcefully.",
	},
	"WorkerSliceGatewayRecreationFailed": {
		Name:                "WorkerSliceGatewayRecreationFailed",
		Reason:              "WorkerSliceGatewayRecreationFailed",
		Action:              "CreateWorkerSliceGateway",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway recreation failed after forceful deletion.",
	},
	"WorkerSliceGatewayRecreated": {
		Name:                "WorkerSliceGatewayRecreated",
		Reason:              "WorkerSliceGatewayRecreated",
		Action:              "CreateWorkerSliceGateway",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice gateway got recreated after forceful deletion.",
	},
	"WorkerSliceGatewayDeletionFailed": {
		Name:                "WorkerSliceGatewayDeletionFailed",
		Reason:              "WorkerSliceGatewayDeletionFailed",
		Action:              "DeleteWorkerSliceGateway",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway deletion failed.",
	},
	"WorkerSliceGatewayDeleted": {
		Name:                "WorkerSliceGatewayDeleted",
		Reason:              "WorkerSliceGatewayDeleted",
		Action:              "DeleteWorkerSliceGateway",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway got deleted.",
	},
	"WorkerSliceGatewayCreationFailed": {
		Name:                "WorkerSliceGatewayCreationFailed",
		Reason:              "WorkerSliceGatewayCreationFailed",
		Action:              "CreateWorkerSliceGateway",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice gateway creation failed.",
	},
	"WorkerSliceGatewayCreated": {
		Name:                "WorkerSliceGatewayCreated",
		Reason:              "WorkerSliceGatewayCreated",
		Action:              "CreateWorkerSliceGateway",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice gateway got created.",
	},
	"SliceGatewayJobCreationFailed": {
		Name:                "SliceGatewayJobCreationFailed",
		Reason:              "SliceGatewayJobCreationFailed",
		Action:              "CreateSliceGatewayJob",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice gateway job creation failed.",
	},
	"SliceGatewayJobCreated": {
		Name:                "SliceGatewayJobCreated",
		Reason:              "SliceGatewayJobCreated",
		Action:              "CreateSliceGatewayJob",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice gateway job got created.",
	},
	"DefaultDeploymentSliceRoleTemplateCreationFailed": {
		Name:                "DefaultDeploymentSliceRoleTemplateCreationFailed",
		Reason:              "DefaultDeploymentSliceRoleTemplateCreationFailed",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default deployment slice role template creation failed.",
	},
	"DefaultDeploymentSliceRoleTemplateCreated": {
		Name:                "DefaultDeploymentSliceRoleTemplateCreated",
		Reason:              "DefaultDeploymentSliceRoleTemplateCreated",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default deployment slice role template got created.",
	},
	"DefaultReaderSliceRoleTemplateCreationFailed": {
		Name:                "DefaultReaderSliceRoleTemplateCreationFailed",
		Reason:              "DefaultReaderSliceRoleTemplateCreationFailed",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Default reader slice role template creation failed.",
	},
	"DefaultReaderSliceRoleTemplateCreated": {
		Name:                "DefaultReaderSliceRoleTemplateCreated",
		Reason:              "DefaultReaderSliceRoleTemplateCreated",
		Action:              "CreateSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Default reader slice role template got created.",
	},
	"SliceResourceQuotaCreationFailed": {
		Name:                "SliceResourceQuotaCreationFailed",
		Reason:              "SliceResourceQuotaCreationFailed",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota creation failed while creating slice config.",
	},
	"SliceResourceQuotaCreatedOnSliceConfigCreation": {
		Name:                "SliceResourceQuotaCreatedOnSliceConfigCreation",
		Reason:              "SliceResourceQuotaCreatedOnSliceConfigCreation",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota got created while creating slice config.",
	},
	"SliceNodeAffinityDeletionFailed": {
		Name:                "SliceNodeAffinityDeletionFailed",
		Reason:              "SliceNodeAffinityDeletionFailed",
		Action:              "DeleteSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice node affinity deletion failed.",
	},
	"SliceNodeAffinityDeleted": {
		Name:                "SliceNodeAffinityDeleted",
		Reason:              "SliceNodeAffinityDeleted",
		Action:              "DeleteSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice node affinity got deleted.",
	},
	"SetSliceConfigAsOwnerOfSliceNodeAffinityFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice node affinity.",
	},
	"SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice node affinity.",
	},
	"SliceResourceQuotaDeletionFailed": {
		Name:                "SliceResourceQuotaDeletionFailed",
		Reason:              "SliceResourceQuotaDeletionFailed",
		Action:              "DeleteSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota deletion failed.",
	},
	"SliceResourceQuotaDeleted": {
		Name:                "SliceResourceQuotaDeleted",
		Reason:              "SliceResourceQuotaDeleted",
		Action:              "DeleteSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota got deleted.",
	},
	"SliceResourceQuotaRecreationFailed": {
		Name:                "SliceResourceQuotaRecreationFailed",
		Reason:              "SliceResourceQuotaRecreationFailed",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice resource quota recreation failed after forceful deletion.",
	},
	"SliceResourceQuotaRecreated": {
		Name:                "SliceResourceQuotaRecreated",
		Reason:              "SliceResourceQuotaRecreated",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota got recreated after forceful deletion.",
	},
	"SetSliceConfigAsOwnerOfSliceResourceQuotaFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice resource quota config.",
	},
	"SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice resource quota config.",
	},
	"SliceResourceQuotaCreated": {
		Name:                "SliceResourceQuotaCreated",
		Reason:              "SliceResourceQuotaCreated",
		Action:              "CreateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota config got created successfully.",
	},
	"SliceResourceQuotaUpdated": {
		Name:                "SliceResourceQuotaUpdated",
		Reason:              "SliceResourceQuotaUpdated",
		Action:              "UpdateSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice resource quota config got updated successfully.",
	},
	"AllRQSpecificationViolationMetricsResetSuccess": {
		Name:                "AllRQSpecificationViolationMetricsResetSuccess",
		Reason:              "AllRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All resource quota specifications and violations metrics got reset successfully.",
	},
	"SliceRQSpecificationViolationMetricsResetSuccess": {
		Name:                "SliceRQSpecificationViolationMetricsResetSuccess",
		Reason:              "SliceRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All slice level resource quota specifications and violations metrics got reset successfully.",
	},
	"ClusterRQSpecificationViolationMetricsResetSuccess": {
		Name:                "ClusterRQSpecificationViolationMetricsResetSuccess",
		Reason:              "ClusterRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All cluster level resource quota specifications and violations metrics got reset successfully.",
	},
	"OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess": {
		Name:                "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess",
		Reason:              "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All outdated namespace level resource quota specifications and violations metrics got reset successfully.",
	},
	"OutdatedClusterRQSpecificationViolationMetricsResetSuccess": {
		Name:                "OutdatedClusterRQSpecificationViolationMetricsResetSuccess",
		Reason:              "OutdatedClusterRQSpecificationViolationMetricsResetSuccess",
		Action:              "ResetResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "All outdated cluster level resource quota specifications and violations metrics got reset successfully.",
	},
	"SliceRoleBindingDeletingFailed": {
		Name:                "SliceRoleBindingDeletingFailed",
		Reason:              "SliceRoleBindingDeletingFailed",
		Action:              "DeleteSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice role binding deletion failed.",
	},
	"SliceRoleBindingDeleted": {
		Name:                "SliceRoleBindingDeleted",
		Reason:              "SliceRoleBindingDeleted",
		Action:              "DeleteSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice role binding got deleted.",
	},
	"SetSliceConfigAsOwnerOfSliceRoleBindingFailed": {
		Name:                "SetSliceConfigAsOwnerOfSliceRoleBindingFailed",
		Reason:              "SetSliceConfigAsOwnerOfSliceRoleBindingFailed",
		Action:              "SetSliceConfigAsOwnerOfSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Failed to set slice config as owner of slice role binding.",
	},
	"SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded": {
		Name:                "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded",
		Reason:              "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded",
		Action:              "SetSliceConfigAsOwnerOfSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Successfully set slice config as owner of slice role binding.",
	},
	"SliceRoleTemplateDeletionFailed": {
		Name:                "SliceRoleTemplateDeletionFailed",
		Reason:              "SliceRoleTemplateDeletionFailed",
		Action:              "DeleteSliceRoleTemplate",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Slice role template deletion failed.",
	},
	"SliceRoleTemplateDeleted": {
		Name:                "SliceRoleTemplateDeleted",
		Reason:              "SliceRoleTemplateDeleted",
		Action:              "DeleteSliceRoleTemplate",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Slice role template got deleted.",
	},
	"WorkerSliceRoleBindingReconciliationSuccess": {
		Name:                "WorkerSliceRoleBindingReconciliationSuccess",
		Reason:              "WorkerSliceRoleBindingReconciliationSuccess",
		Action:              "ReconcileWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Reconciliation of worker slice role binding is successful due to the change in slice role template.",
	},
	"WorkerSliceNodeAffinityDeletedForcefully": {
		Name:                "WorkerSliceNodeAffinityDeletedForcefully",
		Reason:              "WorkerSliceNodeAffinityDeletedForcefully",
		Action:              "DeleteWorkerSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice node affinity got deleted forcefully.",
	},
	"WorkerSliceNodeAffinityRecreationFailed": {
		Name:                "WorkerSliceNodeAffinityRecreationFailed",
		Reason:              "WorkerSliceNodeAffinityRecreationFailed",
		Action:              "CreateWorkerSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice node affinity recreation failed after forceful deletion.",
	},
	"WorkerSliceNodeAffinityRecreated": {
		Name:                "WorkerSliceNodeAffinityRecreated",
		Reason:              "WorkerSliceNodeAffinityRecreated",
		Action:              "CreateWorkerSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice node affinity got recreated after forceful deletion.",
	},
	"NodeAffinityRilesExpansionFailed": {
		Name:                "NodeAffinityRilesExpansionFailed",
		Reason:              "NodeAffinityRilesExpansionFailed",
		Action:              "ExpandNodeAffinityRules",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Node affinity rules expansion failed.",
	},
	"SliceNodeAffinityConfigDeepCopyFailed": {
		Name:                "SliceNodeAffinityConfigDeepCopyFailed",
		Reason:              "SliceNodeAffinityConfigDeepCopyFailed",
		Action:              "DeepCopySliceNodeAffinityConfig",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Deep copy of slice node affinity configuration got failed.",
	},
	"WorkerSliceNodeAffinityCreationFailed": {
		Name:                "WorkerSliceNodeAffinityCreationFailed",
		Reason:              "WorkerSliceNodeAffinityCreationFailed",
		Action:              "CreateWorkerSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice node affinity creation failed.",
	},
	"WorkerSliceNodeAffinityCreated": {
		Name:                "WorkerSliceNodeAffinityCreated",
		Reason:              "WorkerSliceNodeAffinityCreated",
		Action:              "CreateWorkerSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice node affinity got created successfully.",
	},
	"WorkerSliceNodeAffinityUpdateFailed": {
		Name:                "WorkerSliceNodeAffinityUpdateFailed",
		Reason:              "WorkerSliceNodeAffinityUpdateFailed",
		Action:              "UpdateWorkerSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice node affinity update failed.",
	},
	"WorkerSliceNodeAffinityUpdated": {
		Name:                "WorkerSliceNodeAffinityUpdated",
		Reason:              "WorkerSliceNodeAffinityUpdated",
		Action:              "UpdateWorkerSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice node affinity got updated successfully.",
	},
	"WorkerSliceNodeAffinityDeletionFailed": {
		Name:                "WorkerSliceNodeAffinityDeletionFailed",
		Reason:              "WorkerSliceNodeAffinityDeletionFailed",
		Action:              "DeleteWorkerSliceNodeAffinity",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice node affinity deletion failed.",
	},
	"WorkerSliceNodeAffinityDeleted": {
		Name:                "WorkerSliceNodeAffinityDeleted",
		Reason:              "WorkerSliceNodeAffinityDeleted",
		Action:              "DeleteWorkerSliceNodeAffinity",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice node affinity got deleted successfully.",
	},
	"WorkerSliceResourceQuotaDeletedForcefully": {
		Name:                "WorkerSliceResourceQuotaDeletedForcefully",
		Reason:              "WorkerSliceResourceQuotaDeletedForcefully",
		Action:              "DeleteWorkerSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice resource quota got deleted forcefully.",
	},
	"WorkerSliceResourceQuotaRecreationFailed": {
		Name:                "WorkerSliceResourceQuotaRecreationFailed",
		Reason:              "WorkerSliceResourceQuotaRecreationFailed",
		Action:              "CreateWorkerSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice resource quota recreation failed after forceful deletion.",
	},
	"WorkerSliceResourceQuotaRecreated": {
		Name:                "WorkerSliceResourceQuotaRecreated",
		Reason:              "WorkerSliceResourceQuotaRecreated",
		Action:              "CreateWorkerSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice resource quota got recreated after forceful deletion.",
	},
	"OffBoardedNamespaceUtilizationMetricsReset": {
		Name:                "OffBoardedNamespaceUtilizationMetricsReset",
		Reason:              "OffBoardedNamespaceUtilizationMetricsReset",
		Action:              "ResetOffBoardedNamespaceUtilizationMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Utilization metrics of off-boarded namespaces got reset successfully.",
	},
	"ResourceQuotaMetricsPopulated": {
		Name:                "ResourceQuotaMetricsPopulated",
		Reason:              "ResourceQuotaMetricsPopulated",
		Action:              "PopulateResourceQuotaMetrics",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Resource quota metrics got populated successfully.",
	},
	"ClusterCPULimitViolated": {
		Name:                "ClusterCPULimitViolated",
		Reason:              "ClusterCPULimitViolated",
		Action:              "ViolateClusterCPULimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU limit is violated at cluster level.",
	},
	"ClusterMemoryLimitViolated": {
		Name:                "ClusterMemoryLimitViolated",
		Reason:              "ClusterMemoryLimitViolated",
		Action:              "ViolateClusterMemoryLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory limit is violated at cluster level.",
	},
	"ClusterPodCountViolated": {
		Name:                "ClusterPodCountViolated",
		Reason:              "ClusterPodCountViolated",
		Action:              "ViolateClusterPodCount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Pod count is violated at cluster level.",
	},
	"ClusterEphemeralStorageLimitViolated": {
		Name:                "ClusterEphemeralStorageLimitViolated",
		Reason:              "ClusterEphemeralStorageLimitViolated",
		Action:              "ViolateClusterEphemeralStorageLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage limit is violated at cluster level.",
	},
	"ClusterCPURequestViolated": {
		Name:                "ClusterCPURequestViolated",
		Reason:              "ClusterCPURequestViolated",
		Action:              "ViolateClusterCPURequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU request is violated at cluster level.",
	},
	"ClusterMemoryRequestViolated": {
		Name:                "ClusterMemoryRequestViolated",
		Reason:              "ClusterMemoryRequestViolated",
		Action:              "ViolateClusterMemoryRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory request is violated at cluster level.",
	},
	"ClusterEphemeralStorageRequestViolated": {
		Name:                "ClusterEphemeralStorageRequestViolated",
		Reason:              "ClusterEphemeralStorageRequestViolated",
		Action:              "ViolateClusterEphemeralStorageRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage request is violated at cluster level.",
	},
	"NamespaceCPULimitViolated": {
		Name:                "NamespaceCPULimitViolated",
		Reason:              "NamespaceCPULimitViolated",
		Action:              "ViolateNamespaceCPULimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU limit is violated at namespace level.",
	},
	"NamespaceMemoryLimitViolated": {
		Name:                "NamespaceMemoryLimitViolated",
		Reason:              "NamespaceMemoryLimitViolated",
		Action:              "ViolateNamespaceMemoryLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory limit is violated at namespace level.",
	},
	"NamespacePodCountViolated": {
		Name:                "NamespacePodCountViolated",
		Reason:              "NamespacePodCountViolated",
		Action:              "ViolateNamespacePodCount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Pod count is violated at namespace level.",
	},
	"NamespaceEphemeralStorageLimitViolated": {
		Name:                "NamespaceEphemeralStorageLimitViolated",
		Reason:              "NamespaceEphemeralStorageLimitViolated",
		Action:              "ViolateNamespaceEphemeralStorageLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage limit is violated at namespace level.",
	},
	"NamespaceCPURequestViolated": {
		Name:                "NamespaceCPURequestViolated",
		Reason:              "NamespaceCPURequestViolated",
		Action:              "ViolateNamespaceCPURequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU request is violated at namespace level.",
	},
	"NamespaceMemoryRequestViolated": {
		Name:                "NamespaceMemoryRequestViolated",
		Reason:              "NamespaceMemoryRequestViolated",
		Action:              "ViolateNamespaceMemoryRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory request is violated at namespace level.",
	},
	"NamespaceEphemeralStorageRequestViolated": {
		Name:                "NamespaceEphemeralStorageRequestViolated",
		Reason:              "NamespaceEphemeralStorageRequestViolated",
		Action:              "ViolateNamespaceEphemeralStorageRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage request is violated at namespace level.",
	},
	"SliceCPULimitViolated": {
		Name:                "SliceCPULimitViolated",
		Reason:              "SliceCPULimitViolated",
		Action:              "ViolateSliceCPULimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU limit is violated at slice level.",
	},
	"SliceMemoryLimitViolated": {
		Name:                "SliceMemoryLimitViolated",
		Reason:              "SliceMemoryLimitViolated",
		Action:              "ViolateSliceMemoryLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory limit is violated at slice level.",
	},
	"SlicePodCountViolated": {
		Name:                "SlicePodCountViolated",
		Reason:              "SlicePodCountViolated",
		Action:              "ViolateSlicePodCount",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Pod count is violated at slice level.",
	},
	"SliceEphemeralStorageLimitViolated": {
		Name:                "SliceEphemeralStorageLimitViolated",
		Reason:              "SliceEphemeralStorageLimitViolated",
		Action:              "ViolateSliceEphemeralStorageLimit",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage limit is violated at slice level.",
	},
	"SliceCPURequestViolated": {
		Name:                "SliceCPURequestViolated",
		Reason:              "SliceCPURequestViolated",
		Action:              "ViolateSliceCPURequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "CPU request is violated at slice level.",
	},
	"SliceMemoryRequestViolated": {
		Name:                "SliceMemoryRequestViolated",
		Reason:              "SliceMemoryRequestViolated",
		Action:              "ViolateSliceMemoryRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Memory request is violated at slice level.",
	},
	"SliceEphemeralStorageRequestViolated": {
		Name:                "SliceEphemeralStorageRequestViolated",
		Reason:              "SliceEphemeralStorageRequestViolated",
		Action:              "ViolateSliceEphemeralStorageRequest",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Ephemeral storage request is violated at slice level.",
	},
	"WorkerSliceResourceQuotaCreationFailed": {
		Name:                "WorkerSliceResourceQuotaCreationFailed",
		Reason:              "WorkerSliceResourceQuotaCreationFailed",
		Action:              "CreateWorkerSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice resource quota creation failed.",
	},
	"WorkerSliceResourceQuotaCreated": {
		Name:                "WorkerSliceResourceQuotaCreated",
		Reason:              "WorkerSliceResourceQuotaCreated",
		Action:              "CreateWorkerSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice resource quota got created successfully.",
	},
	"WorkerSliceResourceQuotaUpdateFailed": {
		Name:                "WorkerSliceResourceQuotaUpdateFailed",
		Reason:              "WorkerSliceResourceQuotaUpdateFailed",
		Action:              "UpdateWorkerSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice resource quota update failed.",
	},
	"WorkerSliceResourceQuotaUpdated": {
		Name:                "WorkerSliceResourceQuotaUpdated",
		Reason:              "WorkerSliceResourceQuotaUpdated",
		Action:              "UpdateWorkerSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice resource quota got updated successfully.",
	},
	"WorkerSliceResourceQuotaDeletionFailed": {
		Name:                "WorkerSliceResourceQuotaDeletionFailed",
		Reason:              "WorkerSliceResourceQuotaDeletionFailed",
		Action:              "DeleteWorkerSliceResourceQuota",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice resource quota deletion failed.",
	},
	"WorkerSliceResourceQuotaDeleted": {
		Name:                "WorkerSliceResourceQuotaDeleted",
		Reason:              "WorkerSliceResourceQuotaDeleted",
		Action:              "DeleteWorkerSliceResourceQuota",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice resource quota got deleted successfully.",
	},
	"WorkerSliceRoleBindingDeletedForcefully": {
		Name:                "WorkerSliceRoleBindingDeletedForcefully",
		Reason:              "WorkerSliceRoleBindingDeletedForcefully",
		Action:              "DeleteWorkerSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice role binding got deleted forcefully.",
	},
	"WorkerSliceRoleBindingRecreationFailed": {
		Name:                "WorkerSliceRoleBindingRecreationFailed",
		Reason:              "WorkerSliceRoleBindingRecreationFailed",
		Action:              "CreateWorkerSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice role binding recreation failed after forceful deletion.",
	},
	"WorkerSliceRoleBindingRecreated": {
		Name:                "WorkerSliceRoleBindingRecreated",
		Reason:              "WorkerSliceRoleBindingRecreated",
		Action:              "CreateWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice role binding got recreated after forceful deletion.",
	},
	"WorkerSliceRoleBindingCreationFailed": {
		Name:                "WorkerSliceRoleBindingCreationFailed",
		Reason:              "WorkerSliceRoleBindingCreationFailed",
		Action:              "CreateWorkerSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice role binding creation failed.",
	},
	"WorkerSliceRoleBindingCreated": {
		Name:                "WorkerSliceRoleBindingCreated",
		Reason:              "WorkerSliceRoleBindingCreated",
		Action:              "CreateWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice role binding got created successfully.",
	},
	"WorkerSliceRoleBindingUpdateFailed": {
		Name:                "WorkerSliceRoleBindingUpdateFailed",
		Reason:              "WorkerSliceRoleBindingUpdateFailed",
		Action:              "UpdateWorkerSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice role binding update failed.",
	},
	"WorkerSliceRoleBindingUpdated": {
		Name:                "WorkerSliceRoleBindingUpdated",
		Reason:              "WorkerSliceRoleBindingUpdated",
		Action:              "UpdateWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice role binding got updated successfully.",
	},
	"WorkerSliceRoleBindingDeletionFailed": {
		Name:                "WorkerSliceRoleBindingDeletionFailed",
		Reason:              "WorkerSliceRoleBindingDeletionFailed",
		Action:              "DeleteWorkerSliceRoleBinding",
		Type:                EventTypeWarning,
		ReportingController: "controller",
		Message:             "Worker slice role binding deletion failed.",
	},
	"WorkerSliceRoleBindingDeleted": {
		Name:                "WorkerSliceRoleBindingDeleted",
		Reason:              "WorkerSliceRoleBindingDeleted",
		Action:              "DeleteWorkerSliceRoleBinding",
		Type:                EventTypeNormal,
		ReportingController: "controller",
		Message:             "Worker slice role binding got deleted successfully.",
	},
	"NetPolViolation": {
		Name:                "NetPolViolation",
		Reason:              "PolicyViolation",
		Action:              "PolicyMonitoring",
		Type:                EventTypeWarning,
		ReportingController: "worker",
		Message:             "Network policy violation - please ask admin to check the network policy configuration on the worker cluster. <link to tech doc event-list>",
	},
	"ClusterUnhealthy": {
		Name:                "ClusterUnhealthy",
		Reason:              "ComponentStatusChange",
		Action:              "CheckComponents",
		Type:                EventTypeWarning,
		ReportingController: "worker",
		Message:             "Cluster is unhealthy - Please check if all worker components are running as expected",
	},
	"ClusterHealthy": {
		Name:                "ClusterHealthy",
		Reason:              "ComponentStatusChange",
		Action:              "None",
		Type:                EventTypeNormal,
		ReportingController: "worker",
		Message:             "Cluster is healthy - Cluster is back to healthy state",
	},
}

var (
	EventLicenseSecretNotFound                                        EventName = "LicenseSecretNotFound"
	EventMachineFileNotFound                                          EventName = "MachineFileNotFound"
	EventMachineFileInvalid                                           EventName = "MachineFileInvalid"
	EventLicenseKeyInvalid                                            EventName = "LicenseKeyInvalid"
	EventLicenseExpired                                               EventName = "LicenseExpired"
	EventLicenseExpiredGracePeriodOn                                  EventName = "LicenseExpiredGracePeriodOn"
	EventMachineFingerPrintErr                                        EventName = "MachineFingerPrintErr"
	EventGotMachineFingerPrint                                        EventName = "GotMachineFingerPrint"
	EventConfigMapErr                                                 EventName = "ConfigMapErr"
	EventGotConfigMap                                                 EventName = "GotConfigMap"
	EventLicenseProxyUnreachable                                      EventName = "LicenseProxyUnreachable"
	EventLicenseDeployError                                           EventName = "LicenseDeployError"
	EventLicenseDeploySuccess                                         EventName = "LicenseDeploySuccess"
	EventClusterMetadataCollectionFailed                              EventName = "ClusterMetadataCollectionFailed"
	EventClusterMetadataCollectionSuccess                             EventName = "ClusterMetadataCollectionSuccess"
	EventLicenseDataFetchError                                        EventName = "LicenseDataFetchError"
	EventLicenseDataFetchSuccess                                      EventName = "LicenseDataFetchSuccess"
	EventLicenseSecretCreationFailed                                  EventName = "LicenseSecretCreationFailed"
	EventLicenseSecretCreationSuccess                                 EventName = "LicenseSecretCreationSuccess"
	EventProjectDeleted                                               EventName = "ProjectDeleted"
	EventProjectDeletionFailed                                        EventName = "ProjectDeletionFailed"
	EventClusterDeleted                                               EventName = "ClusterDeleted"
	EventClusterDeletionFailed                                        EventName = "ClusterDeletionFailed"
	EventSliceConfigDeleted                                           EventName = "SliceConfigDeleted"
	EventSliceConfigDeletionFailed                                    EventName = "SliceConfigDeletionFailed"
	EventServiceExportConfigDeleted                                   EventName = "ServiceExportConfigDeleted"
	EventServiceExportConfigDeletionFailed                            EventName = "ServiceExportConfigDeletionFailed"
	EventSliceQoSConfigDeleted                                        EventName = "SliceQoSConfigDeleted"
	EventSliceQoSConfigDeletionFailed                                 EventName = "SliceQoSConfigDeletionFailed"
	EventSecretDeleted                                                EventName = "SecretDeleted"
	EventSecretDeletionFailed                                         EventName = "SecretDeletionFailed"
	EventNamespaceCreated                                             EventName = "NamespaceCreated"
	EventNamespaceCreationFailed                                      EventName = "NamespaceCreationFailed"
	EventNamespaceDeleted                                             EventName = "NamespaceDeleted"
	EventNamespaceDeletionFailed                                      EventName = "NamespaceDeletionFailed"
	EventWorkerClusterRoleCreated                                     EventName = "WorkerClusterRoleCreated"
	EventWorkerClusterRoleCreationFailed                              EventName = "WorkerClusterRoleCreationFailed"
	EventWorkerClusterRoleUpdated                                     EventName = "WorkerClusterRoleUpdated"
	EventWorkerClusterRoleUpdateFailed                                EventName = "WorkerClusterRoleUpdateFailed"
	EventReadOnlyRoleCreated                                          EventName = "ReadOnlyRoleCreated"
	EventReadOnlyRoleCreationFailed                                   EventName = "ReadOnlyRoleCreationFailed"
	EventReadOnlyRoleUpdated                                          EventName = "ReadOnlyRoleUpdated"
	EventReadOnlyRoleUpdateFailed                                     EventName = "ReadOnlyRoleUpdateFailed"
	EventReadWriteRoleCreated                                         EventName = "ReadWriteRoleCreated"
	EventReadWriteRoleCreationFailed                                  EventName = "ReadWriteRoleCreationFailed"
	EventReadWriteRoleUpdated                                         EventName = "ReadWriteRoleUpdated"
	EventReadWriteRoleUpdateFailed                                    EventName = "ReadWriteRoleUpdateFailed"
	EventServiceAccountCreated                                        EventName = "ServiceAccountCreated"
	EventServiceAccountCreationFailed                                 EventName = "ServiceAccountCreationFailed"
	EventServiceAccountSecretCreated                                  EventName = "ServiceAccountSecretCreated"
	EventServiceAccountSecretCreationFailed                           EventName = "ServiceAccountSecretCreationFailed"
	EventDefaultRoleBindingCreated                                    EventName = "DefaultRoleBindingCreated"
	EventDefaultRoleBindingCreationFailed                             EventName = "DefaultRoleBindingCreationFailed"
	EventDefaultRoleBindingUpdated                                    EventName = "DefaultRoleBindingUpdated"
	EventDefaultRoleBindingUpdateFailed                               EventName = "DefaultRoleBindingUpdateFailed"
	EventDefaultRoleBindingDeleted                                    EventName = "DefaultRoleBindingDeleted"
	EventDefaultRoleBindingDeletionFailed                             EventName = "DefaultRoleBindingDeletionFailed"
	EventInactiveRoleBindingDeleted                                   EventName = "InactiveRoleBindingDeleted"
	EventInactiveRoleBindingDeletionFailed                            EventName = "InactiveRoleBindingDeletionFailed"
	EventInactiveServiceAccountDeleted                                EventName = "InactiveServiceAccountDeleted"
	EventInactiveServiceAccountDeletionFailed                         EventName = "InactiveServiceAccountDeletionFailed"
	EventServiceAccountDeleted                                        EventName = "ServiceAccountDeleted"
	EventServiceAccountDeletionFailed                                 EventName = "ServiceAccountDeletionFailed"
	EventWorkerServiceImportDeletedForcefully                         EventName = "WorkerServiceImportDeletedForcefully"
	EventWorkerServiceImportRecreationFailed                          EventName = "WorkerServiceImportRecreationFailed"
	EventWorkerServiceImportRecreated                                 EventName = "WorkerServiceImportRecreated"
	EventWorkerServiceImportCreationFailed                            EventName = "WorkerServiceImportCreationFailed"
	EventWorkerServiceImportCreated                                   EventName = "WorkerServiceImportCreated"
	EventWorkerServiceImportUpdateFailed                              EventName = "WorkerServiceImportUpdateFailed"
	EventWorkerServiceImportUpdated                                   EventName = "WorkerServiceImportUpdated"
	EventWorkerServiceImportDeleted                                   EventName = "WorkerServiceImportDeleted"
	EventWorkerServiceImportDeletionFailed                            EventName = "WorkerServiceImportDeletionFailed"
	EventWorkerSliceConfigDeletedForcefully                           EventName = "WorkerSliceConfigDeletedForcefully"
	EventWorkerSliceConfigRecreationFailed                            EventName = "WorkerSliceConfigRecreationFailed"
	EventWorkerSliceConfigRecreated                                   EventName = "WorkerSliceConfigRecreated"
	EventWorkerSliceConfigCreationFailed                              EventName = "WorkerSliceConfigCreationFailed"
	EventWorkerSliceConfigCreated                                     EventName = "WorkerSliceConfigCreated"
	EventWorkerSliceConfigUpdateFailed                                EventName = "WorkerSliceConfigUpdateFailed"
	EventWorkerSliceConfigUpdated                                     EventName = "WorkerSliceConfigUpdated"
	EventWorkerSliceConfigDeleted                                     EventName = "WorkerSliceConfigDeleted"
	EventWorkerSliceConfigDeletionFailed                              EventName = "WorkerSliceConfigDeletionFailed"
	EventWorkerSliceGatewaySecretDeletionFailed                       EventName = "WorkerSliceGatewaySecretDeletionFailed"
	EventWorkerSliceGatewaySecretDeleted                              EventName = "WorkerSliceGatewaySecretDeleted"
	EventWorkerSliceGatewayDeletedForcefully                          EventName = "WorkerSliceGatewayDeletedForcefully"
	EventWorkerSliceGatewayRecreationFailed                           EventName = "WorkerSliceGatewayRecreationFailed"
	EventWorkerSliceGatewayRecreated                                  EventName = "WorkerSliceGatewayRecreated"
	EventWorkerSliceGatewayDeletionFailed                             EventName = "WorkerSliceGatewayDeletionFailed"
	EventWorkerSliceGatewayDeleted                                    EventName = "WorkerSliceGatewayDeleted"
	EventWorkerSliceGatewayCreationFailed                             EventName = "WorkerSliceGatewayCreationFailed"
	EventWorkerSliceGatewayCreated                                    EventName = "WorkerSliceGatewayCreated"
	EventSliceGatewayJobCreationFailed                                EventName = "SliceGatewayJobCreationFailed"
	EventSliceGatewayJobCreated                                       EventName = "SliceGatewayJobCreated"
	EventDefaultDeploymentSliceRoleTemplateCreationFailed             EventName = "DefaultDeploymentSliceRoleTemplateCreationFailed"
	EventDefaultDeploymentSliceRoleTemplateCreated                    EventName = "DefaultDeploymentSliceRoleTemplateCreated"
	EventDefaultReaderSliceRoleTemplateCreationFailed                 EventName = "DefaultReaderSliceRoleTemplateCreationFailed"
	EventDefaultReaderSliceRoleTemplateCreated                        EventName = "DefaultReaderSliceRoleTemplateCreated"
	EventSliceResourceQuotaCreationFailed                             EventName = "SliceResourceQuotaCreationFailed"
	EventSliceResourceQuotaCreatedOnSliceConfigCreation               EventName = "SliceResourceQuotaCreatedOnSliceConfigCreation"
	EventSliceNodeAffinityDeletionFailed                              EventName = "SliceNodeAffinityDeletionFailed"
	EventSliceNodeAffinityDeleted                                     EventName = "SliceNodeAffinityDeleted"
	EventSetSliceConfigAsOwnerOfSliceNodeAffinityFailed               EventName = "SetSliceConfigAsOwnerOfSliceNodeAffinityFailed"
	EventSetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded            EventName = "SetSliceConfigAsOwnerOfSliceNodeAffinitySucceeded"
	EventSliceResourceQuotaDeletionFailed                             EventName = "SliceResourceQuotaDeletionFailed"
	EventSliceResourceQuotaDeleted                                    EventName = "SliceResourceQuotaDeleted"
	EventSliceResourceQuotaRecreationFailed                           EventName = "SliceResourceQuotaRecreationFailed"
	EventSliceResourceQuotaRecreated                                  EventName = "SliceResourceQuotaRecreated"
	EventSetSliceConfigAsOwnerOfSliceResourceQuotaFailed              EventName = "SetSliceConfigAsOwnerOfSliceResourceQuotaFailed"
	EventSetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded           EventName = "SetSliceConfigAsOwnerOfSliceResourceQuotaSucceeded"
	EventSliceResourceQuotaCreated                                    EventName = "SliceResourceQuotaCreated"
	EventSliceResourceQuotaUpdated                                    EventName = "SliceResourceQuotaUpdated"
	EventAllRQSpecificationViolationMetricsResetSuccess               EventName = "AllRQSpecificationViolationMetricsResetSuccess"
	EventSliceRQSpecificationViolationMetricsResetSuccess             EventName = "SliceRQSpecificationViolationMetricsResetSuccess"
	EventClusterRQSpecificationViolationMetricsResetSuccess           EventName = "ClusterRQSpecificationViolationMetricsResetSuccess"
	EventOutdatedNamespaceRQSpecificationViolationMetricsResetSuccess EventName = "OutdatedNamespaceRQSpecificationViolationMetricsResetSuccess"
	EventOutdatedClusterRQSpecificationViolationMetricsResetSuccess   EventName = "OutdatedClusterRQSpecificationViolationMetricsResetSuccess"
	EventSliceRoleBindingDeletingFailed                               EventName = "SliceRoleBindingDeletingFailed"
	EventSliceRoleBindingDeleted                                      EventName = "SliceRoleBindingDeleted"
	EventSetSliceConfigAsOwnerOfSliceRoleBindingFailed                EventName = "SetSliceConfigAsOwnerOfSliceRoleBindingFailed"
	EventSetSliceConfigAsOwnerOfSliceRoleBindingSucceeded             EventName = "SetSliceConfigAsOwnerOfSliceRoleBindingSucceeded"
	EventSliceRoleTemplateDeletionFailed                              EventName = "SliceRoleTemplateDeletionFailed"
	EventSliceRoleTemplateDeleted                                     EventName = "SliceRoleTemplateDeleted"
	EventWorkerSliceRoleBindingReconciliationSuccess                  EventName = "WorkerSliceRoleBindingReconciliationSuccess"
	EventWorkerSliceNodeAffinityDeletedForcefully                     EventName = "WorkerSliceNodeAffinityDeletedForcefully"
	EventWorkerSliceNodeAffinityRecreationFailed                      EventName = "WorkerSliceNodeAffinityRecreationFailed"
	EventWorkerSliceNodeAffinityRecreated                             EventName = "WorkerSliceNodeAffinityRecreated"
	EventNodeAffinityRilesExpansionFailed                             EventName = "NodeAffinityRilesExpansionFailed"
	EventSliceNodeAffinityConfigDeepCopyFailed                        EventName = "SliceNodeAffinityConfigDeepCopyFailed"
	EventWorkerSliceNodeAffinityCreationFailed                        EventName = "WorkerSliceNodeAffinityCreationFailed"
	EventWorkerSliceNodeAffinityCreated                               EventName = "WorkerSliceNodeAffinityCreated"
	EventWorkerSliceNodeAffinityUpdateFailed                          EventName = "WorkerSliceNodeAffinityUpdateFailed"
	EventWorkerSliceNodeAffinityUpdated                               EventName = "WorkerSliceNodeAffinityUpdated"
	EventWorkerSliceNodeAffinityDeletionFailed                        EventName = "WorkerSliceNodeAffinityDeletionFailed"
	EventWorkerSliceNodeAffinityDeleted                               EventName = "WorkerSliceNodeAffinityDeleted"
	EventWorkerSliceResourceQuotaDeletedForcefully                    EventName = "WorkerSliceResourceQuotaDeletedForcefully"
	EventWorkerSliceResourceQuotaRecreationFailed                     EventName = "WorkerSliceResourceQuotaRecreationFailed"
	EventWorkerSliceResourceQuotaRecreated                            EventName = "WorkerSliceResourceQuotaRecreated"
	EventOffBoardedNamespaceUtilizationMetricsReset                   EventName = "OffBoardedNamespaceUtilizationMetricsReset"
	EventResourceQuotaMetricsPopulated                                EventName = "ResourceQuotaMetricsPopulated"
	EventClusterCPULimitViolated                                      EventName = "ClusterCPULimitViolated"
	EventClusterMemoryLimitViolated                                   EventName = "ClusterMemoryLimitViolated"
	EventClusterPodCountViolated                                      EventName = "ClusterPodCountViolated"
	EventClusterEphemeralStorageLimitViolated                         EventName = "ClusterEphemeralStorageLimitViolated"
	EventClusterCPURequestViolated                                    EventName = "ClusterCPURequestViolated"
	EventClusterMemoryRequestViolated                                 EventName = "ClusterMemoryRequestViolated"
	EventClusterEphemeralStorageRequestViolated                       EventName = "ClusterEphemeralStorageRequestViolated"
	EventNamespaceCPULimitViolated                                    EventName = "NamespaceCPULimitViolated"
	EventNamespaceMemoryLimitViolated                                 EventName = "NamespaceMemoryLimitViolated"
	EventNamespacePodCountViolated                                    EventName = "NamespacePodCountViolated"
	EventNamespaceEphemeralStorageLimitViolated                       EventName = "NamespaceEphemeralStorageLimitViolated"
	EventNamespaceCPURequestViolated                                  EventName = "NamespaceCPURequestViolated"
	EventNamespaceMemoryRequestViolated                               EventName = "NamespaceMemoryRequestViolated"
	EventNamespaceEphemeralStorageRequestViolated                     EventName = "NamespaceEphemeralStorageRequestViolated"
	EventSliceCPULimitViolated                                        EventName = "SliceCPULimitViolated"
	EventSliceMemoryLimitViolated                                     EventName = "SliceMemoryLimitViolated"
	EventSlicePodCountViolated                                        EventName = "SlicePodCountViolated"
	EventSliceEphemeralStorageLimitViolated                           EventName = "SliceEphemeralStorageLimitViolated"
	EventSliceCPURequestViolated                                      EventName = "SliceCPURequestViolated"
	EventSliceMemoryRequestViolated                                   EventName = "SliceMemoryRequestViolated"
	EventSliceEphemeralStorageRequestViolated                         EventName = "SliceEphemeralStorageRequestViolated"
	EventWorkerSliceResourceQuotaCreationFailed                       EventName = "WorkerSliceResourceQuotaCreationFailed"
	EventWorkerSliceResourceQuotaCreated                              EventName = "WorkerSliceResourceQuotaCreated"
	EventWorkerSliceResourceQuotaUpdateFailed                         EventName = "WorkerSliceResourceQuotaUpdateFailed"
	EventWorkerSliceResourceQuotaUpdated                              EventName = "WorkerSliceResourceQuotaUpdated"
	EventWorkerSliceResourceQuotaDeletionFailed                       EventName = "WorkerSliceResourceQuotaDeletionFailed"
	EventWorkerSliceResourceQuotaDeleted                              EventName = "WorkerSliceResourceQuotaDeleted"
	EventWorkerSliceRoleBindingDeletedForcefully                      EventName = "WorkerSliceRoleBindingDeletedForcefully"
	EventWorkerSliceRoleBindingRecreationFailed                       EventName = "WorkerSliceRoleBindingRecreationFailed"
	EventWorkerSliceRoleBindingRecreated                              EventName = "WorkerSliceRoleBindingRecreated"
	EventWorkerSliceRoleBindingCreationFailed                         EventName = "WorkerSliceRoleBindingCreationFailed"
	EventWorkerSliceRoleBindingCreated                                EventName = "WorkerSliceRoleBindingCreated"
	EventWorkerSliceRoleBindingUpdateFailed                           EventName = "WorkerSliceRoleBindingUpdateFailed"
	EventWorkerSliceRoleBindingUpdated                                EventName = "WorkerSliceRoleBindingUpdated"
	EventWorkerSliceRoleBindingDeletionFailed                         EventName = "WorkerSliceRoleBindingDeletionFailed"
	EventWorkerSliceRoleBindingDeleted                                EventName = "WorkerSliceRoleBindingDeleted"
	EventNetPolViolation                                              EventName = "NetPolViolation"
	EventClusterUnhealthy                                             EventName = "ClusterUnhealthy"
	EventClusterHealthy                                               EventName = "ClusterHealthy"
)
