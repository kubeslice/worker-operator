// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pkg/sidecar/sidecarpb/gw_sidecar.proto

package sidecar

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GwSidecarServiceClient is the client API for GwSidecarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GwSidecarServiceClient interface {
	// The Interface to get the Pod status.
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GwPodStatus, error)
	// The Interface to get the Remote Gw Pod Name.
	GetSliceGwRemotePodName(ctx context.Context, in *RemoteGwVpnIP, opts ...grpc.CallOption) (*GwPodStatus, error)
	// The Interface to update the connection context. It also adds the route.
	UpdateConnectionContext(ctx context.Context, in *SliceGwConnectionContext, opts ...grpc.CallOption) (*SidecarResponse, error)
	// Update Slice QoS Profile
	UpdateSliceQosProfile(ctx context.Context, in *SliceQosProfile, opts ...grpc.CallOption) (*SidecarResponse, error)
}

type gwSidecarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGwSidecarServiceClient(cc grpc.ClientConnInterface) GwSidecarServiceClient {
	return &gwSidecarServiceClient{cc}
}

func (c *gwSidecarServiceClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GwPodStatus, error) {
	out := new(GwPodStatus)
	err := c.cc.Invoke(ctx, "/sidecar.GwSidecarService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gwSidecarServiceClient) GetSliceGwRemotePodName(ctx context.Context, in *RemoteGwVpnIP, opts ...grpc.CallOption) (*GwPodStatus, error) {
	out := new(GwPodStatus)
	err := c.cc.Invoke(ctx, "/sidecar.GwSidecarService/GetSliceGwRemotePodName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gwSidecarServiceClient) UpdateConnectionContext(ctx context.Context, in *SliceGwConnectionContext, opts ...grpc.CallOption) (*SidecarResponse, error) {
	out := new(SidecarResponse)
	err := c.cc.Invoke(ctx, "/sidecar.GwSidecarService/UpdateConnectionContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gwSidecarServiceClient) UpdateSliceQosProfile(ctx context.Context, in *SliceQosProfile, opts ...grpc.CallOption) (*SidecarResponse, error) {
	out := new(SidecarResponse)
	err := c.cc.Invoke(ctx, "/sidecar.GwSidecarService/UpdateSliceQosProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GwSidecarServiceServer is the server API for GwSidecarService service.
// All implementations must embed UnimplementedGwSidecarServiceServer
// for forward compatibility
type GwSidecarServiceServer interface {
	// The Interface to get the Pod status.
	GetStatus(context.Context, *empty.Empty) (*GwPodStatus, error)
	// The Interface to get the Remote Gw Pod Name.
	GetSliceGwRemotePodName(context.Context, *RemoteGwVpnIP) (*GwPodStatus, error)
	// The Interface to update the connection context. It also adds the route.
	UpdateConnectionContext(context.Context, *SliceGwConnectionContext) (*SidecarResponse, error)
	// Update Slice QoS Profile
	UpdateSliceQosProfile(context.Context, *SliceQosProfile) (*SidecarResponse, error)
	mustEmbedUnimplementedGwSidecarServiceServer()
}

// UnimplementedGwSidecarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGwSidecarServiceServer struct {
}

func (UnimplementedGwSidecarServiceServer) GetStatus(context.Context, *empty.Empty) (*GwPodStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGwSidecarServiceServer) GetSliceGwRemotePodName(context.Context, *RemoteGwVpnIP) (*GwPodStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSliceGwRemotePodName not implemented")
}
func (UnimplementedGwSidecarServiceServer) UpdateConnectionContext(context.Context, *SliceGwConnectionContext) (*SidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionContext not implemented")
}
func (UnimplementedGwSidecarServiceServer) UpdateSliceQosProfile(context.Context, *SliceQosProfile) (*SidecarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSliceQosProfile not implemented")
}
func (UnimplementedGwSidecarServiceServer) mustEmbedUnimplementedGwSidecarServiceServer() {}

// UnsafeGwSidecarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GwSidecarServiceServer will
// result in compilation errors.
type UnsafeGwSidecarServiceServer interface {
	mustEmbedUnimplementedGwSidecarServiceServer()
}

func RegisterGwSidecarServiceServer(s grpc.ServiceRegistrar, srv GwSidecarServiceServer) {
	s.RegisterService(&GwSidecarService_ServiceDesc, srv)
}

func _GwSidecarService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwSidecarServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.GwSidecarService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwSidecarServiceServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GwSidecarService_GetSliceGwRemotePodName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteGwVpnIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwSidecarServiceServer).GetSliceGwRemotePodName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.GwSidecarService/GetSliceGwRemotePodName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwSidecarServiceServer).GetSliceGwRemotePodName(ctx, req.(*RemoteGwVpnIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _GwSidecarService_UpdateConnectionContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceGwConnectionContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwSidecarServiceServer).UpdateConnectionContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.GwSidecarService/UpdateConnectionContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwSidecarServiceServer).UpdateConnectionContext(ctx, req.(*SliceGwConnectionContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _GwSidecarService_UpdateSliceQosProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliceQosProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GwSidecarServiceServer).UpdateSliceQosProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.GwSidecarService/UpdateSliceQosProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GwSidecarServiceServer).UpdateSliceQosProfile(ctx, req.(*SliceQosProfile))
	}
	return interceptor(ctx, in, info, handler)
}

// GwSidecarService_ServiceDesc is the grpc.ServiceDesc for GwSidecarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GwSidecarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sidecar.GwSidecarService",
	HandlerType: (*GwSidecarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _GwSidecarService_GetStatus_Handler,
		},
		{
			MethodName: "GetSliceGwRemotePodName",
			Handler:    _GwSidecarService_GetSliceGwRemotePodName_Handler,
		},
		{
			MethodName: "UpdateConnectionContext",
			Handler:    _GwSidecarService_UpdateConnectionContext_Handler,
		},
		{
			MethodName: "UpdateSliceQosProfile",
			Handler:    _GwSidecarService_UpdateSliceQosProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/sidecar/sidecarpb/gw_sidecar.proto",
}
