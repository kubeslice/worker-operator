//  Copyright (c) 2022 Avesha, Inc. All rights reserved.
//
//  SPDX-License-Identifier: Apache-2.0
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: router_sidecar.proto

package sidecar

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// slice gateway-host-type
type SliceGwHostType int32

const (
	SliceGwHostType_SLICE_GW_SERVER SliceGwHostType = 0
	SliceGwHostType_SLICE_GW_CLIENT SliceGwHostType = 1
)

// Enum value maps for SliceGwHostType.
var (
	SliceGwHostType_name = map[int32]string{
		0: "SLICE_GW_SERVER",
		1: "SLICE_GW_CLIENT",
	}
	SliceGwHostType_value = map[string]int32{
		"SLICE_GW_SERVER": 0,
		"SLICE_GW_CLIENT": 1,
	}
)

func (x SliceGwHostType) Enum() *SliceGwHostType {
	p := new(SliceGwHostType)
	*p = x
	return p
}

func (x SliceGwHostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SliceGwHostType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_sidecar_proto_enumTypes[0].Descriptor()
}

func (SliceGwHostType) Type() protoreflect.EnumType {
	return &file_router_sidecar_proto_enumTypes[0]
}

func (x SliceGwHostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SliceGwHostType.Descriptor instead.
func (SliceGwHostType) EnumDescriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{0}
}

// SidecarResponse represents the Sidecar response format.
type SidecarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusMsg string `protobuf:"bytes,1,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`
}

func (x *SidecarResponse) Reset() {
	*x = SidecarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarResponse) ProtoMessage() {}

func (x *SidecarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarResponse.ProtoReflect.Descriptor instead.
func (*SidecarResponse) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{0}
}

func (x *SidecarResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

// SliceGwConContext - Slice GW connection information
type SliceGwConContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slice-Id
	SliceId string `protobuf:"bytes,1,opt,name=sliceId,proto3" json:"sliceId,omitempty"`
	// Local slice-gw ID
	LocalSliceGwId string `protobuf:"bytes,2,opt,name=localSliceGwId,proto3" json:"localSliceGwId,omitempty"`
	// Local slice-gw VPN IP
	LocalSliceGwVpnIP string `protobuf:"bytes,3,opt,name=localSliceGwVpnIP,proto3" json:"localSliceGwVpnIP,omitempty"`
	// Local Slice-gw-host-type  -  client/server
	LocalSliceGwHostType SliceGwHostType `protobuf:"varint,4,opt,name=localSliceGwHostType,proto3,enum=router.SliceGwHostType" json:"localSliceGwHostType,omitempty"`
	// Local slice-gw NSM Subnet
	LocalSliceGwNsmSubnet string `protobuf:"bytes,5,opt,name=localSliceGwNsmSubnet,proto3" json:"localSliceGwNsmSubnet,omitempty"`
	// Remote slice-gw NSM subnet
	RemoteSliceGwNsmSubnet string `protobuf:"bytes,6,opt,name=remoteSliceGwNsmSubnet,proto3" json:"remoteSliceGwNsmSubnet,omitempty"`
	// Local NSM gw peer IP
	LocalNsmGwPeerIP string `protobuf:"bytes,7,opt,name=localNsmGwPeerIP,proto3" json:"localNsmGwPeerIP,omitempty"`
	// Local NSM gw peer IPs
	LocalNsmGwPeerIPList []string `protobuf:"bytes,8,rep,name=localNsmGwPeerIPList,proto3" json:"localNsmGwPeerIPList,omitempty"`
}

func (x *SliceGwConContext) Reset() {
	*x = SliceGwConContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceGwConContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceGwConContext) ProtoMessage() {}

func (x *SliceGwConContext) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceGwConContext.ProtoReflect.Descriptor instead.
func (*SliceGwConContext) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{1}
}

func (x *SliceGwConContext) GetSliceId() string {
	if x != nil {
		return x.SliceId
	}
	return ""
}

func (x *SliceGwConContext) GetLocalSliceGwId() string {
	if x != nil {
		return x.LocalSliceGwId
	}
	return ""
}

func (x *SliceGwConContext) GetLocalSliceGwVpnIP() string {
	if x != nil {
		return x.LocalSliceGwVpnIP
	}
	return ""
}

func (x *SliceGwConContext) GetLocalSliceGwHostType() SliceGwHostType {
	if x != nil {
		return x.LocalSliceGwHostType
	}
	return SliceGwHostType_SLICE_GW_SERVER
}

func (x *SliceGwConContext) GetLocalSliceGwNsmSubnet() string {
	if x != nil {
		return x.LocalSliceGwNsmSubnet
	}
	return ""
}

func (x *SliceGwConContext) GetRemoteSliceGwNsmSubnet() string {
	if x != nil {
		return x.RemoteSliceGwNsmSubnet
	}
	return ""
}

func (x *SliceGwConContext) GetLocalNsmGwPeerIP() string {
	if x != nil {
		return x.LocalNsmGwPeerIP
	}
	return ""
}

func (x *SliceGwConContext) GetLocalNsmGwPeerIPList() []string {
	if x != nil {
		return x.LocalNsmGwPeerIPList
	}
	return nil
}

type VerifyRouteAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address on the nsm interface on the client/server
	NsmIP string `protobuf:"bytes,1,opt,name=nsmIP,proto3" json:"nsmIP,omitempty"`
	// Remote slice-gw NSM subnet
	DstIP string `protobuf:"bytes,2,opt,name=dstIP,proto3" json:"dstIP,omitempty"`
}

func (x *VerifyRouteAddRequest) Reset() {
	*x = VerifyRouteAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRouteAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRouteAddRequest) ProtoMessage() {}

func (x *VerifyRouteAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRouteAddRequest.ProtoReflect.Descriptor instead.
func (*VerifyRouteAddRequest) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyRouteAddRequest) GetNsmIP() string {
	if x != nil {
		return x.NsmIP
	}
	return ""
}

func (x *VerifyRouteAddRequest) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

type VerifyRouteAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// isRoutePresent checks if route is present
	IsRoutePresent bool `protobuf:"varint,1,opt,name=isRoutePresent,proto3" json:"isRoutePresent,omitempty"`
}

func (x *VerifyRouteAddResponse) Reset() {
	*x = VerifyRouteAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRouteAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRouteAddResponse) ProtoMessage() {}

func (x *VerifyRouteAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRouteAddResponse.ProtoReflect.Descriptor instead.
func (*VerifyRouteAddResponse) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyRouteAddResponse) GetIsRoutePresent() bool {
	if x != nil {
		return x.IsRoutePresent
	}
	return false
}

type EcmpUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote slice-gw NSM subnet
	RemoteSliceGwNsmSubnet string `protobuf:"bytes,1,opt,name=remoteSliceGwNsmSubnet,proto3" json:"remoteSliceGwNsmSubnet,omitempty"`
	// Local NSM ip to remove
	NsmIPToRemove string `protobuf:"bytes,8,opt,name=nsmIPToRemove,proto3" json:"nsmIPToRemove,omitempty"`
}

func (x *EcmpUpdateInfo) Reset() {
	*x = EcmpUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcmpUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcmpUpdateInfo) ProtoMessage() {}

func (x *EcmpUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcmpUpdateInfo.ProtoReflect.Descriptor instead.
func (*EcmpUpdateInfo) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{4}
}

func (x *EcmpUpdateInfo) GetRemoteSliceGwNsmSubnet() string {
	if x != nil {
		return x.RemoteSliceGwNsmSubnet
	}
	return ""
}

func (x *EcmpUpdateInfo) GetNsmIPToRemove() string {
	if x != nil {
		return x.NsmIPToRemove
	}
	return ""
}

// ConnectionInfo - Slice Router client connection information
type ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pod Name of the client
	PodName string `protobuf:"bytes,1,opt,name=podName,proto3" json:"podName,omitempty"`
	// Name of the nsm interface created after successful connection
	NsmInterface string `protobuf:"bytes,2,opt,name=nsmInterface,proto3" json:"nsmInterface,omitempty"`
	// IP address on the nsm interface on the client
	NsmIP string `protobuf:"bytes,3,opt,name=nsmIP,proto3" json:"nsmIP,omitempty"`
	// IP address on the nsm interface on the slice router
	NsmPeerIP string `protobuf:"bytes,4,opt,name=nsmPeerIP,proto3" json:"nsmPeerIP,omitempty"`
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectionInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ConnectionInfo) GetNsmInterface() string {
	if x != nil {
		return x.NsmInterface
	}
	return ""
}

func (x *ConnectionInfo) GetNsmIP() string {
	if x != nil {
		return x.NsmIP
	}
	return ""
}

func (x *ConnectionInfo) GetNsmPeerIP() string {
	if x != nil {
		return x.NsmPeerIP
	}
	return ""
}

// ClientConnectionInfo - Consolidated client connection information.
// Represents all clients connected to the slice router.
type ClientConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection []*ConnectionInfo `protobuf:"bytes,1,rep,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ClientConnectionInfo) Reset() {
	*x = ClientConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_sidecar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConnectionInfo) ProtoMessage() {}

func (x *ClientConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_router_sidecar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConnectionInfo.ProtoReflect.Descriptor instead.
func (*ClientConnectionInfo) Descriptor() ([]byte, []int) {
	return file_router_sidecar_proto_rawDescGZIP(), []int{6}
}

func (x *ClientConnectionInfo) GetConnection() []*ConnectionInfo {
	if x != nil {
		return x.Connection
	}
	return nil
}

var File_router_sidecar_proto protoreflect.FileDescriptor

var file_router_sidecar_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x0f, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x9e, 0x03, 0x0a,
	0x11, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x43, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x47, 0x77, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x47, 0x77, 0x56, 0x70, 0x6e, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x56, 0x70, 0x6e,
	0x49, 0x50, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x47, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47,
	0x77, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x4e,
	0x73, 0x6d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x4e, 0x73, 0x6d, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x4e, 0x73, 0x6d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x47, 0x77, 0x4e, 0x73, 0x6d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x73, 0x6d, 0x47, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x73,
	0x6d, 0x47, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x73, 0x6d, 0x47, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x73,
	0x6d, 0x47, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a,
	0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74,
	0x49, 0x50, 0x22, 0x40, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x45, 0x63, 0x6d, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x4e, 0x73, 0x6d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x47, 0x77, 0x4e, 0x73, 0x6d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x73, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x73, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x73, 0x6d, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x73, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x73, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x50, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x3b, 0x0a, 0x0f, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x47, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x57, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x57, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x32, 0xed, 0x02, 0x0a, 0x19, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x47, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x47, 0x77, 0x43, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x1d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x63, 0x6d, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x63, 0x6d,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x17, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_router_sidecar_proto_rawDescOnce sync.Once
	file_router_sidecar_proto_rawDescData = file_router_sidecar_proto_rawDesc
)

func file_router_sidecar_proto_rawDescGZIP() []byte {
	file_router_sidecar_proto_rawDescOnce.Do(func() {
		file_router_sidecar_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_sidecar_proto_rawDescData)
	})
	return file_router_sidecar_proto_rawDescData
}

var file_router_sidecar_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_router_sidecar_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_router_sidecar_proto_goTypes = []interface{}{
	(SliceGwHostType)(0),           // 0: router.SliceGwHostType
	(*SidecarResponse)(nil),        // 1: router.SidecarResponse
	(*SliceGwConContext)(nil),      // 2: router.SliceGwConContext
	(*VerifyRouteAddRequest)(nil),  // 3: router.VerifyRouteAddRequest
	(*VerifyRouteAddResponse)(nil), // 4: router.VerifyRouteAddResponse
	(*EcmpUpdateInfo)(nil),         // 5: router.EcmpUpdateInfo
	(*ConnectionInfo)(nil),         // 6: router.ConnectionInfo
	(*ClientConnectionInfo)(nil),   // 7: router.ClientConnectionInfo
	(*empty.Empty)(nil),            // 8: google.protobuf.Empty
}
var file_router_sidecar_proto_depIdxs = []int32{
	0, // 0: router.SliceGwConContext.localSliceGwHostType:type_name -> router.SliceGwHostType
	6, // 1: router.ClientConnectionInfo.connection:type_name -> router.ConnectionInfo
	2, // 2: router.SliceRouterSidecarService.UpdateSliceGwConnectionContext:input_type -> router.SliceGwConContext
	8, // 3: router.SliceRouterSidecarService.GetSliceRouterClientConnectionInfo:input_type -> google.protobuf.Empty
	3, // 4: router.SliceRouterSidecarService.GetRouteInKernel:input_type -> router.VerifyRouteAddRequest
	5, // 5: router.SliceRouterSidecarService.UpdateEcmpRoutes:input_type -> router.EcmpUpdateInfo
	1, // 6: router.SliceRouterSidecarService.UpdateSliceGwConnectionContext:output_type -> router.SidecarResponse
	7, // 7: router.SliceRouterSidecarService.GetSliceRouterClientConnectionInfo:output_type -> router.ClientConnectionInfo
	4, // 8: router.SliceRouterSidecarService.GetRouteInKernel:output_type -> router.VerifyRouteAddResponse
	1, // 9: router.SliceRouterSidecarService.UpdateEcmpRoutes:output_type -> router.SidecarResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_router_sidecar_proto_init() }
func file_router_sidecar_proto_init() {
	if File_router_sidecar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_router_sidecar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceGwConContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRouteAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRouteAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcmpUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_sidecar_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_sidecar_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_router_sidecar_proto_goTypes,
		DependencyIndexes: file_router_sidecar_proto_depIdxs,
		EnumInfos:         file_router_sidecar_proto_enumTypes,
		MessageInfos:      file_router_sidecar_proto_msgTypes,
	}.Build()
	File_router_sidecar_proto = out.File
	file_router_sidecar_proto_rawDesc = nil
	file_router_sidecar_proto_goTypes = nil
	file_router_sidecar_proto_depIdxs = nil
}
